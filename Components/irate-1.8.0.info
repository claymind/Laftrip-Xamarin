{"Name":"iRate Rating Prompt","Id":406,"Alias":"irate","Description":"iRate helps promote your iOS App by prompting users to rate the app after they\u0027ve used it\nfor a few days. Targeting relatively loyal users is one of the best ways to get rave\nreviews.\n\n## Setup\n\niRate typically requires little configuration, and will simply run automatically, using\nthe app bundle\u0027s ID to look up the app on the App Store.\n\nIf you have apps with matching bundle IDs on both the iOS and Mac App Stores,\nthe automatic lookup mechanism actually won\u0027t work, so you\u0027ll need to manually\nset the `AppStoreID` property–a numeric ID that can be found in iTunes Connect.\n\nIf you wish to customize iRate, do so *before* the app has finished launching\nin your AppDelegate\u0027s static constructor:\n\n```csharp\nusing MTiRate;\n...\n\nstatic AppDelegate ()\n{\n  iRate.SharedInstance.DaysUntilPrompt = 5;\n  iRate.SharedInstance.UsesUntilPrompt = 15;\n}\n```\n\n## Localization\n\nThe default strings for iRate are already localized for many languages.\n\nYou can override iRate\u0027s default strings by using individual setter methods:\n\n```csharp\nusing MTiRate;\n...\n\nstatic AppDelegate ()\n{\n  iRate.SharedInstance.MessageTitle = \"Rate My App\";\n  iRate.SharedInstance.Message = \"If you like MyApp, please take the time, etc\";;\n  iRate.SharedInstance.CancelButtonLabel = \"No, Thanks\";\n  iRate.SharedInstance.RemindButtonLabel = \"Remind Me Later\";\n  iRate.SharedInstance.RateButtonLabel = \"Rate It Now\";\n}\n```\n*Screenshots assembled with [PlaceIt](http://placeit.breezi.com/).*\n","Version":"1.8.0","Summary":"Asks users to rate your app after they\u0027ve used it for a while.","QuickStart":"iRate helps promote your iOS App by prompting users to rate the app after they\u0027ve used it\nfor a few days. Targeting relatively loyal users is one of the best ways to get rave\nreviews.\n\n## Setup\n\niRate typically requires little configuration, and will simply run automatically, using\nthe app bundle\u0027s ID to look up the app on the App Store.\n\nIf you have apps with matching bundle IDs on both the iOS and Mac App Stores,\nthe automatic lookup mechanism actually won\u0027t work, so you\u0027ll need to manually\nset the `AppStoreID` property–a numeric ID that can be found in iTunes Connect.\n\nIf you wish to customize iRate, do so *before* the app has finished launching\nin your AppDelegate\u0027s static constructor:\n\n```csharp\nusing MTiRate;\n...\n\nstatic AppDelegate ()\n{\n  iRate.SharedInstance.DaysUntilPrompt = 5;\n  iRate.SharedInstance.UsesUntilPrompt = 15;\n\t\t\n\tiRate.SharedInstance.UserDidAttemptToRateApp += (sender, e) =\u003e {\n\t\tConsole.WriteLine (\"User is rating app now!\");\n\t};\n\t\t\n\tiRate.SharedInstance.UserDidDeclineToRateApp += (sender, e) =\u003e {\n\t\tConsole.WriteLine (\"User does not want to rate app\");\n\t};\n\t\t\n\tiRate.SharedInstance.UserDidRequestReminderToRateApp += (sender, e) =\u003e {\n\t\tConsole.WriteLine (\"User will rate app later\");\n\t};\n}\n```\n\n## Localization\n\nThe default strings for iRate are already localized for many languages.\n\nYou can override iRate\u0027s default strings by using individual setter methods:\n\n```csharp\nusing MTiRate;\n...\n\nstatic AppDelegate ()\n{\n  iRate.SharedInstance.MessageTitle = \"Rate My App\";\n  iRate.SharedInstance.Message = \"If you like MyApp, please take the time, etc\";;\n  iRate.SharedInstance.CancelButtonLabel = \"No, Thanks\";\n  iRate.SharedInstance.RemindButtonLabel = \"Remind Me Later\";\n  iRate.SharedInstance.RateButtonLabel = \"Rate It Now\";\n}\n```\n\n## Configuration\n\nThere are a number of properties of the iRate class that can alter the behavior and\nappearance of iRate. These should be mostly self-explanatory, but they are documented\nbelow.\n\n### PreviewMode\n\n```csharp\nbool PreviewMode { get; set; }\n```\n\nIf set to `true`, iRate will always display the rating prompt on launch, regardless of how\nlong the app has been in use or whether it\u0027s the latest version. Use this to proofread\nyour message and check your configuration is correct during testing, but disable it for\nthe final release (defaults to `false`).\n\n### AppStoreID\n\n```csharp\nuint AppStoreID { get; set; }\n```\n\nThis should match the iTunes app ID of your application, which you can get from iTunes\nconnect after setting up your app. This value is not normally necessary and is generally\nonly required if you have the aforementioned conflict between bundle IDs for your Mac and\niOS apps.\n\n### AppStoreGenreID\n\n```csharp\nuint AppStoreGenreID { get; set; }\n```\n\nThis is the type of app, used to determine the default text for the rating dialog. This is\nset automatically by calling an iTunes service, so you shouldn\u0027t need to set it manually\nfor most purposes. If you do wish to override this value, setting it to the\n`\"iRateAppStoreGameGenreID\"` constant will cause iRate to use the \"game\" version of the\nrating dialog, and setting it to any other value will use the \"app\" version of the rating\ndialog.\n\n### AppStoreCountry\n\n```csharp\nstring AppStoreCountry { get; set; }\n```\n\nThis is the two-letter country code used to specify which iTunes store to check. It is set\nautomatically from the device locale preferences, so shouldn\u0027t need to be changed in most\ncases. You can override this to point to the US store, or another specific store if you\nprefer, which may be a good idea if your app is only available in certain countries.\n\n### ApplicationName\n\n```csharp\nstring ApplicationName { get; set; }\n```\n\nThis is the name of the app displayed in the iRate alert. It is set automatically from the\napplication\u0027s info.plist, but you may wish to override it with a shorter or longer\nversion.\n\n### ApplicationBundleID\n\n```csharp\nstring ApplicationBundleID { get; set; }\n```\n\nThis is the application bundle ID, used to retrieve the `AppStoreID` and `AppStoreGenreID`\nfrom iTunes. This is set automatically from the app\u0027s info.plist, so you shouldn\u0027t need to\nchange it except for testing purposes.\n\n### DaysUntilPrompt\n\n```csharp\nfloat DaysUntilPrompt { get; set; }\n```\n\nThis is the number of days the user must have had the app installed before they are\nprompted to rate it. The time is measured from the first time the app is launched. This is\na floating point value, so it can be used to specify a fractional number of days (e.g.\n0.5). The default value is 10 days.\n\n### UsesUntilPrompt\n\n```csharp\nuint UsesUntilPrompt { get; set; }\n```\n\nThis is the minimum number of times the user must launch the app before they are prompted\nto rate it. This avoids the scenario where a user runs the app once, doesn\u0027t look at it\nfor weeks and then launches it again, only to be immediately prompted to rate it. The\nminimum use count ensures that only frequent users are prompted. The prompt will appear\nonly after the specified number of days AND uses has been reached. This defaults to 10\nevents. This defaults to 10 uses.\n\n### EventsUntilPrompt\n\n```csharp\nuint EventsUntilPrompt { get; set; }\n```\n\nFor some apps, launches are not a good metric for usage. For example the app might be a\ndaemon that runs constantly, or a game where the user can\u0027t write an informed review until\nthey\u0027ve reached a particular level. In this case you can manually log significant events\nand have the prompt appear after a predetermined number of these events. Like the\nUsesUntilPrompt setting, the prompt will appear only after the specified number of days\nAND events, however once the day threshold is reached, the prompt will appear if EITHER\nthe event threshold OR uses threshold is reached. This defaults to 10 events.\n\n### UsesPerWeekForPrompt\n\n```csharp\nfloat UsesPerWeekForPrompt { get; set; }\n```\n\nIf you are less concerned with the total number of times the app is used, but would prefer\nto use the *frequency* of times the app is used, you can use the `UsesPerWeekForPrompt`\nproperty to set a minimum threshold for the number of times the user must launch the app\nper week (on average) for the prompt to be shown. Note that this is the average since the\napp was installed, so if the user goes for a long period without running the app, it may\nthrow off the average. The default value is zero.\n\n### RemindPeriod\n\n```csharp\nfloat RemindPeriod { get; set; }\n```\n\nHow long the app should wait before reminding a user to rate after they select the \"remind\nme later\" option (measured in days). A value of zero means the app will remind the user\nnext launch. Note that this value supersedes the other criteria, so the app won\u0027t prompt\nfor a rating during the reminder period, even if a new version is released in the\nmeantime.  This defaults to 1 day.\n\n### MessageTitle\n\n```csharp\nstring MessageTitle { get; set; }\n```\n\nThe title displayed for the rating prompt. If you don\u0027t want to display a title then set\nthis to `\"\"` (empty string).\n\n### Message\n\n```csharp\nstring Message { get; set; }\n```\n\nThe rating prompt message. This should be polite and courteous, but not too wordy. If you\ndon\u0027t want to display a message then set this to `\"\"` (empty string);\n\n### CancelButtonLabel\n\n```csharp\nstring CancelButtonLabel { get; set; }\n```\n\nThe button label for the button to dismiss the rating prompt without rating the app.\n\n### RateButtonLabel\n\n```csharp\nstring RateButtonLabel { get; set; }\n```\n\nThe button label for the button the user presses if they want to rate the app.\n\n### RemindButtonLabel\n\n```csharp\nstring RemindButtonLabel { get; set; }\n```\n\nThe button label for the button the user presses if they don\u0027t want to rate the app\nimmediately, but do want to be reminded about it in future. Set this to `\"\"` if\nyou don\u0027t want to display the remind me button - e.g. if you don\u0027t have space on screen.\n\n### UseAllAvailableLanguages\n\n```csharp\nbool UseAllAvailableLanguages { get; set; }\n```\n\nBy default, iRate will use all available languages in the iRate.bundle, even if used in an\napp that does not support localization. If you would prefer to restrict iRate to only use\nthe same set of languages that your application already supports, set this property to NO.\n(Defaults to `true`).\n\n### PromptAgainForEachNewVersion\n\n```csharp\nbool PromptAgainForEachNewVersion { get; set; }\n```\n    \nBecause iTunes ratings are version-specific, you ideally want users to rate each new\nversion of your app. However, it\u0027s debatable whether many users will actually do this, and\nif you update frequently this may get annoying. Set `PromptAgainForEachNewVersion` to\n`false`, and iRate won\u0027t prompt the user again each time they install an update if they\u0027ve\nalready rated the app. It will still prompt them each new version if they have *not* rated\nthe app, but you can override this using the `ShouldPromptForRating` delegate method if\nyou wish.\n\n### OnlyPromptIfLatestVersion\n\n```csharp\nbool OnlyPromptIfLatestVersion { get; set; }\n```\n\nSet this to `false` to enabled the rating prompt to be displayed even if the user is not\nrunning the latest version of the app. This defaults to `true` because that way users\nwon\u0027t leave bad reviews due to bugs that you\u0027ve already fixed, etc.\n\n### PromptAtLaunch\n\n```csharp\nbool PromptAtLaunch { get; set; }\n```\n\nSet this to `false` to disable the rating prompt appearing automatically when the\napplication launches or returns from the background. The rating criteria will continue to\nbe tracked, but the prompt will not be displayed automatically while this setting is in\neffect. You can use this option if you wish to manually control display of the rating\nprompt.\n\n### VerboseLogging\n\n```csharp\nbool VerboseLogging { get; set; }\n```\n\nThis option will cause iRate to send detailed logs to the console about the prompt\ndecision process. If your app is not correctly prompting for a rating when you would\nexpect it to, this will help you figure out why. Verbose logging is enabled by default on\ndebug builds, and disabled on release and deployment builds.\n\n## Advanced Properties\n\nIf the default iRate behavior doesn\u0027t meet your requirements, you can implement your own\nby using the advanced properties, methods, and delegate. The properties below let you\naccess internal state and override it.\n\n### RatingsURL\n\n```csharp\nNSUrl RatingsURL { get; set; }\n```\n\nThe URL that the app will direct the user to so they can write a rating for the app. This\nis set to the correct value for the given platform automatically. On iOS 5 and below this\ntakes users directly to the ratings page, but on iOS 6 it takes users to the main app\npage. If you are implementing your own rating prompt, you should probably use the\n`OpenRatingsPageInAppStore` method instead.\n\n\n### FirstUsed\n\n```csharp\nNSDate FirstUsed { get; set; }\n```\n\nThe first date on which the user launched the current version of the app. This is used to\ncalculate whether the DaysUntilPrompt criterion has been met.\n\n### LastReminded\n\n```csharp\nNSDate LastReminded { get; set; }\n```\n\nThe date on which the user last requested to be reminded of an update.\n\n### UsesCount\n\n```csharp\nuint UsesCount { get; set; }\n```\n\nThe number of times the current version of the app has been used (launched).\n\n### EventCount\n\n```csharp\nuint EventCount { get; set; }\n```\n\nThe number of significant application events that have been recorded since the current\nversion was installed. This is incremented by the LogEvent method, but can also be\nmanipulated directly. \n\n### UsesPerWeek\n\n```csharp\nfloat UsesPerWeek { get; set; }\n```\n\nThe average number of times per week that the current version of the app has been used (launched).\n\n### DeclinedThisVersion\n\n```csharp\nbool DeclinedThisVersion { get; set; }\n```\n\nThis flag indicates whether the user has declined to rate the current version.\n\n### DeclinedAnyVersion\n\n```csharp\nbool DeclinedAnyVersion { get; set; }\n```\n\nThis flag indicates whether the user has declined to rate any previous version of the app\n(true) or not (false). This is not currently used by the iRate prompting logic, but may be\nuseful for implementing your own rules using the `ShouldPromptForRating` delegate method.\n\n### RatedThisVersion\n\n```csharp\nbool RatedThisVersion { get; set; }\n```\n\nThis flag indicates whether the user has already rated the current version.\n\n### RatedAnyVersion\n\n```csharp\nbool RatedAnyVersion { get; }\n```\n\nThis indicates whether the user has previously rated any version of the app.\n\n### Delegate\n\n```csharp\nIiRateDelegate Delegate { get; set; }\n```\n\nUse this to detect and/or override iRate\u0027s default behavior.\n\n## Other Methods\n\nBesides configuration, iRate has the following methods.\n\n### LogEvent\n\n```csharp\nvoid LogEvent (bool deferPrompt);\n```\n\nThis method can be called from anywhere in your app (after iRate has been configured) and\nincrements the iRate significant event count. When the predefined number of events is\nreached, the rating prompt will be shown. The optional deferPrompt parameter is used to\ndetermine if the prompt will be shown immediately (false) or if the app will wait until\nthe next launch (true).\n\n### ShouldPromptForRating\n\n```csharp\nbool ShouldPromptForRating ();\n```\n\nReturns `true` if the prompt criteria have been met, and `false` if they have not. You can\nuse this to decide when to display a rating prompt if you have disabled the automatic\ndisplay at app launch.\n\n### PromptForRating\n\n```csharp\nvoid PromptForRating ();\n```\n\nThis method will immediately trigger the rating prompt without checking that the  app\nstore is available, and without calling the iRateShouldShouldPromptForRating delegate\nmethod. Note that this method depends on the `AppStoreID` and `ApplicationGenre`\nproperties, which are only retrieved after polling the iTunes server, so if you intend to\ncall this method directly, you will need to set these properties yourself beforehand, or\nuse the `PromptIfNetworkAvailable ()` method instead.\n\n### PromptIfNetworkAvailable\n\n```csharp\nvoid PromptIfNetworkAvailable ();\n```\n\nThis method will check if the app store is available, and if it is, it will display the\nrating prompt to the user. The `ShouldShouldPromptForRating` delegate method will be\ncalled before the alert is shown, so you can intercept it. Note that if your app is\nsandboxed and does not have the network access permission, this method will ignore the\nnetwork availability status, however in this case you will need to manually set the\nAppStoreID or iRate cannot function.\n\n### OpenRatingsPageInAppStore\n\n```csharp\nbool OpenRatingsPageInAppStore ();\n```\n\nThis method skips the user alert and opens the application ratings page in the iOS app\nstore, or directly within the app, depending on which platform and OS version is running.\nThis method does not perform any checks to verify that the machine has network access or\nthat the app store is available. It also does not call any delegate methods. You should\nuse this method to open the ratings page instead of the RatingsURL property. Note that\nthis method depends on the `AppStoreID` which is only retrieved after polling the iTunes\nserver, so if you intend to call this method directly, you will need to set the\n`AppStoreID` property yourself beforehand.\n\n## Delegate Methods and C# Events\n\nThe iRateDelegate protocol provides the following methods that can be\nused intercept iRate events and override the default behavior. All\nmethods are optional.\n\nFor easier usage every iRateDelegate method is mapped to a C# event with\nthe same name (as shown in Use iRate section above).\n\n### CouldNotConnectToAppStore\n\n```csharp\nvoid CouldNotConnectToAppStore (iRate sender, NSError error);\n```\n\nThis method is called if iRate cannot connect to the App Store, usually\nbecause the network connection is down. in which case you will need to\nmanually set the AppStoreID so that iRate can still function.\n\n### DidDetectAppUpdate\n\n```csharp\nvoid DidDetectAppUpdate (iRate sender);\n```\n\nThis method is called if iRate detects that the application has been\nupdated since the last time it was launched.\n\n### ShouldPromptForRating\n\n```csharp\nbool ShouldPromptForRating (iRate sender);\n```\n\nThis method is called immediately before the rating prompt is displayed\nto the user. You can use this method to block the standard prompt alert\nand display the rating prompt in a different way, or bypass it\naltogether.\n\n### DidPromptForRating\n\n```csharp\nvoid DidPromptForRating (iRate sender);\n```\n\nThis method is called immediately before the rating prompt is displayed. \nThis is useful if you use analytics to track what percentage of users \nsee the prompt and then go to the app store. This can help you fine tune \nthe circumstances around when/how you show the prompt.\n\n### UserDidAttemptToRateApp\n\n```csharp\nvoid UserDidAttemptToRateApp (iRate sender);\n```\n\nThis is called when the user pressed the rate button in the rating\nprompt. This is useful if you want to log user interaction with iRate.\nThis method is only called if you are using the standard iRate alert\nview prompt and will not be called automatically if you provide a custom\nrating implementation or call the `OpenRatingsPageInAppStore` method\ndirectly.\n\n### UserDidDeclineToRateApp\n\n```csharp\nvoid UserDidDeclineToRateApp (iRate sender);\n```\n    \nThis is called when the user declines to rate the app. This is useful if\nyou want to log user interaction with iRate. This method is only called\nif you are using the standard iRate alert view prompt and will not be\ncalled automatically if you provide a custom rating implementation.\n\n### UserDidRequestReminderToRateApp\n\n```csharp\nvoid UserDidRequestReminderToRateApp (iRate sender);\n```\n\nThis is called when the user asks to be reminded to rate the app. This\nis useful if you want to log user interaction with iRate. This method is\nonly called if you are using the standard iRate alert view prompt and\nwill not be called automatically if you provide a custom rating\nimplementation.\n\n### ShouldOpenAppStore\n\n```csharp\nbool ShouldOpenAppStore (iRate sender);\n```\n    \nThis method is called immediately before iRate attempts to open the app\nstore, either via a URL or using the StoreKit in-app product view\ncontroller. Return `false` if you wish to implement your own ratings\npage display logic.\n\n### DidPresentStoreKitModal\n\n```csharp\nvoid DidPresentStoreKitModal (iRate sender);\n```\n    \nThis method is called just after iRate presents the StoreKit in-app\nproduct view controller. It is useful if you want to implement some\nadditional functionality, such as displaying instructions to the user\nfor how to write a review, since the StoreKit controller doesn\u0027t open on\nthe review page. You may also wish to pause certain functionality in\nyour app, etc.\n\n### DidDismissStoreKitModal\n   \n```csharp\nvoid DidDismissStoreKitModal (iRate sender);\n```\n\nThis method is called when the user dismisses the StoreKit in-app\nproduct view controller. This is useful if you want to resume any\nfunctionality that you paused when the modal was displayed.\n\n## Localization\n\nThe default strings for iRate are already localized for many languages.\nBy default, iRate will use all the localizations in the iRate.bundle\neven in an app that is not localized, or which is only localized to a\nsubset of the languages that iRate supports.\n\nIf you would prefer iRate to only use the localizations that are enabled\nin your application (so that if your app only supports English, French\nand Spanish, iRate will automatically be localized for those languages,\nbut not for German, even though iRate includes a German language file),\nset the `UseAllAvailableLanguages` option to `false`.\n\nYou can override iRate\u0027s default strings like so:\n\n```csharp\nstatic AppDelegate ()\n{\n\tiRate.SharedInstance.MessageTitle = \"Rate My App\";\n\tiRate.SharedInstance.Message = \"If you like MyApp, please take the time, etc\";;\n\tiRate.SharedInstance.CancelButtonLabel = \"No, Thanks\";\n\tiRate.SharedInstance.RemindButtonLabel = \"Remind Me Later\";\n\tiRate.SharedInstance.RateButtonLabel = \"Rate It Now\";\n}\n```\n","Hash":"4429bc396871df9eb0ea67bddf77fb8d","TargetPlatforms":["ios"],"TrialHash":null}